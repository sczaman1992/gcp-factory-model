module "gke" {
  source                                = "terraform-google-modules/kubernetes-engine/google//modules/private-cluster"
  version                               = "v26.1.1"
  for_each                              = var.gkes
  project_id                            = var.project_id
  name                                  = each.key
  description                           = try(each.value.description, var.description)
  regional                              = try(each.value.regional, var.regional)
  region                                = try(each.value.region, var.region)
  zones                                 = try(each.value.zones, var.zones)
  network                               = try(each.value.network, var.network)
  network_project_id                    = try(each.value.network_project_id, var.network_project_id)
  subnetwork                            = try(each.value.subnetwork, var.subnetwork)
  kubernetes_version                    = try(each.value.kubernetes_version, var.kubernetes_version)
  master_authorized_networks            = try(each.value.master_authorized_networks, var.master_authorized_networks)
  enable_vertical_pod_autoscaling       = try(each.value.enable_vertical_pod_autoscaling, var.enable_vertical_pod_autoscaling)
  horizontal_pod_autoscaling            = try(each.value.horizontal_pod_autoscaling, var.horizontal_pod_autoscaling)
  http_load_balancing                   = try(each.value.http_load_balancing, var.http_load_balancing)
  service_external_ips                  = try(each.value.service_external_ips, var.service_external_ips)
  datapath_provider                     = try(each.value.datapath_provider, var.datapath_provider)
  maintenance_start_time                = try(each.value.maintenance_start_time, var.maintenance_start_time)
  maintenance_exclusions                = try(each.value.maintenance_exclusions, var.maintenance_exclusions)
  maintenance_end_time                  = try(each.value.maintenance_end_time, var.maintenance_end_time)
  maintenance_recurrence                = try(each.value.maintenance_recurrence, var.maintenance_recurrence)
  ip_range_pods                         = try(each.value.ip_range_pods, var.ip_range_pods)
  ip_range_services                     = try(each.value.ip_range_services, var.ip_range_services)
  node_pools                            = try(each.value.node_pools, var.node_pools)
  windows_node_pools                    = try(each.value.windows_node_pools, var.windows_node_pools)
  node_pools_labels                     = try(each.value.node_pools_labels, var.node_pools_labels)
  node_pools_resource_labels            = try(each.value.node_pools_resource_labels, var.node_pools_resource_labels)
  node_pools_metadata                   = try(each.value.node_pools_metadata, var.node_pools_metadata)
  node_pools_linux_node_configs_sysctls = try(each.value.node_pools_linux_node_configs_sysctls, var.node_pools_linux_node_configs_sysctls)
  enable_cost_allocation                = try(each.value.enable_cost_allocation, var.enable_cost_allocation)
  resource_usage_export_dataset_id      = try(each.value.resource_usage_export_dataset_id, var.resource_usage_export_dataset_id)
  enable_network_egress_export          = try(each.value.enable_network_egress_export, var.enable_network_egress_export)
  enable_resource_consumption_export    = try(each.value.enable_resource_consumption_export, var.enable_resource_consumption_export)
  cluster_autoscaling                   = try(each.value.cluster_autoscaling, var.cluster_autoscaling)
  node_pools_taints                     = try(each.value.node_pools_taints, var.node_pools_taints)
  node_pools_tags                       = try(each.value.node_pools_tags, var.node_pools_tags)
  node_pools_oauth_scopes               = try(each.value.node_pools_oauth_scopes, var.node_pools_oauth_scopes)
  stub_domains                          = try(each.value.stub_domains, var.stub_domains)
  upstream_nameservers                  = try(each.value.upstream_nameservers, var.upstream_nameservers)
  non_masquerade_cidrs                  = try(each.value.non_masquerade_cidrs, var.non_masquerade_cidrs)
  ip_masq_resync_interval               = try(each.value.ip_masq_resync_interval, var.ip_masq_resync_interval)
  ip_masq_link_local                    = try(each.value.ip_masq_link_local, var.ip_masq_link_local)
  configure_ip_masq                     = try(each.value.configure_ip_masq, var.configure_ip_masq)
  logging_service                       = try(each.value.logging_service, var.logging_service)
  monitoring_service                    = try(each.value.monitoring_service, var.monitoring_service)
  create_service_account                = try(each.value.create_service_account, var.create_service_account)
  grant_registry_access                 = try(each.value.grant_registry_access, var.grant_registry_access)
  registry_project_ids                  = try(each.value.registry_project_ids, var.registry_project_ids)
  service_account                       = try(each.value.service_account, var.service_account)
  service_account_name                  = try(each.value.service_account_name, var.service_account_name)
  issue_client_certificate              = try(each.value.issue_client_certificate, var.issue_client_certificate)
  cluster_ipv4_cidr                     = try(each.value.cluster_ipv4_cidr, var.cluster_ipv4_cidr)
  cluster_resource_labels               = try(each.value.cluster_resource_labels, var.cluster_resource_labels)
  deploy_using_private_endpoint         = try(each.value.deploy_using_private_endpoint, var.deploy_using_private_endpoint)
  enable_private_endpoint               = try(each.value.enable_private_endpoint, var.enable_private_endpoint)
  enable_private_nodes                  = try(each.value.enable_private_nodes, var.enable_private_nodes)
  master_ipv4_cidr_block                = try(each.value.master_ipv4_cidr_block, var.master_ipv4_cidr_block)
  master_global_access_enabled          = try(each.value.master_global_access_enabled, var.master_global_access_enabled)
  dns_cache                             = try(each.value.dns_cache, var.dns_cache)
  authenticator_security_group          = try(each.value.authenticator_security_group, var.authenticator_security_group)
  identity_namespace                    = try(each.value.identity_namespace, var.identity_namespace)
  release_channel                       = try(each.value.release_channel, var.release_channel)
  gateway_api_channel                   = try(each.value.gateway_api_channel, var.gateway_api_channel)
  add_cluster_firewall_rules            = try(each.value.add_cluster_firewall_rules, var.add_cluster_firewall_rules)
  add_master_webhook_firewall_rules     = try(each.value.add_master_webhook_firewall_rules, var.add_master_webhook_firewall_rules)
  firewall_priority                     = try(each.value.firewall_priority, var.firewall_priority)
  firewall_inbound_ports                = try(each.value.firewall_inbound_ports, var.firewall_inbound_ports)
  add_shadow_firewall_rules             = try(each.value.add_shadow_firewall_rules, var.add_shadow_firewall_rules)
  shadow_firewall_rules_priority        = try(each.value.shadow_firewall_rules_priority, var.shadow_firewall_rules_priority)
  shadow_firewall_rules_log_config      = try(each.value.shadow_firewall_rules_log_config, var.shadow_firewall_rules_log_config)
  disable_default_snat                  = try(each.value.disable_default_snat, var.disable_default_snat)
  notification_config_topic             = try(each.value.notification_config_topic, var.notification_config_topic)
  network_policy                        = try(each.value.network_policy, var.network_policy)
  network_policy_provider               = try(each.value.network_policy_provider, var.network_policy_provider)
  initial_node_count                    = try(each.value.initial_node_count, var.initial_node_count)
  remove_default_node_pool              = try(each.value.remove_default_node_pool, var.remove_default_node_pool)
  filestore_csi_driver                  = try(each.value.filestore_csi_driver, var.filestore_csi_driver)
  disable_legacy_metadata_endpoints     = try(each.value.disable_legacy_metadata_endpoints, var.disable_legacy_metadata_endpoints)
  default_max_pods_per_node             = try(each.value.default_max_pods_per_node, var.default_max_pods_per_node)
  database_encryption                   = try(each.value.database_encryption, var.database_encryption)
  enable_shielded_nodes                 = try(each.value.enable_shielded_nodes, var.enable_shielded_nodes)
  enable_binary_authorization           = try(each.value.enable_binary_authorization, var.enable_binary_authorization)
  node_metadata                         = try(each.value.node_metadata, var.node_metadata)
  cluster_dns_provider                  = try(each.value.cluster_dns_provider, var.cluster_dns_provider)
  cluster_dns_scope                     = try(each.value.cluster_dns_scope, var.cluster_dns_scope)
  cluster_dns_domain                    = try(each.value.cluster_dns_domain, var.cluster_dns_domain)
  gce_pd_csi_driver                     = try(each.value.gce_pd_csi_driver, var.gce_pd_csi_driver)
  gke_backup_agent_config               = try(each.value.gke_backup_agent_config, var.gke_backup_agent_config)
  timeouts                              = try(each.value.timeouts, var.timeouts)
  monitoring_enable_managed_prometheus  = try(each.value.monitoring_enable_managed_prometheus, var.monitoring_enable_managed_prometheus)
  monitoring_enabled_components         = try(each.value.monitoring_enabled_components, var.monitoring_enabled_components)
  logging_enabled_components            = try(each.value.logging_enabled_components, var.logging_enabled_components)
  enable_kubernetes_alpha               = try(each.value.enable_kubernetes_alpha, var.enable_kubernetes_alpha)
}
